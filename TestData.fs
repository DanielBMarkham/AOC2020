module TestData
open System
open System.Numerics
let inline orderPair(x,y)=if x>y then (x,y) else (y,x)

let m =
  [|
   47I
  ;26I
  ;33I
  ;48I
  ;45I
  ;49I
  ;50I
  ;4I
  ;10I
  ;39I
  ;32I
  ;42I
  ;38I
  ;23I
  ;19I
  ;8I
  ;31I
  ;7I
  ;37I
  ;21I
  ;13I
  ;9I
  ;35I
  ;16I
  ;43I
  ;11I
  ;34I
  ;46I
  ;12I
  ;14I
  ;58I
  ;15I
  ;71I
  ;17I
  ;25I
  ;18I
  ;24I
  ;28I
  ;62I
  ;20I
  ;27I
  ;19I
  ;22I
  ;30I
  ;23I
  ;80I
  ;21I
  ;26I
  ;36I
  ;29I
  ;39I
  ;31I
  ;32I
  ;33I
  ;35I
  ;34I
  ;37I
  ;38I
  ;40I
  ;99I
  ;73I
  ;74I
  ;112I
  ;41I
  ;57I
  ;42I
  ;43I
  ;49I
  ;70I
  ;66I
  ;67I
  ;47I
  ;55I
  ;60I
  ;61I
  ;83I
  ;63I
  ;65I
  ;77I
  ;76I
  ;71I
  ;75I
  ;78I
  ;81I
  ;129I
  ;89I
  ;84I
  ;139I
  ;181I
  ;85I
  ;108I
  ;92I
  ;136I
  ;102I
  ;107I
  ;110I
  ;112I
  ;124I
  ;163I
  ;128I
  ;143I
  ;134I
  ;183I
  ;153I
  ;146I
  ;152I
  ;165I
  ;173I
  ;166I
  ;177I
  ;169I
  ;194I
  ;212I
  ;269I
  ;187I
  ;232I
  ;199I
  ;219I
  ;280I
  ;306I
  ;293I
  ;275I
  ;252I
  ;262I
  ;277I
  ;386I
  ;286I
  ;315I
  ;298I
  ;311I
  ;317I
  ;353I
  ;335I
  ;343I
  ;421I
  ;381I
  ;679I
  ;399I
  ;451I
  ;471I
  ;543I
  ;418I
  ;562I
  ;514I
  ;552I
  ;594I
  ;673I
  ;529I
  ;1235I
  ;563I
  ;633I
  ;584I
  ;615I
  ;651I
  ;1187I
  ;724I
  ;817I
  ;678I
  ;1097I
  ;780I
  ;850I
  ;1144I
  ;1238I
  ;869I
  ;889I
  ;1656I
  ;1167I
  ;1136I
  ;1528I
  ;1986I
  ;1092I
  ;1178I
  ;1113I
  ;1147I
  ;1196I
  ;1402I
  ;1235I
  ;1339I
  ;1468I
  ;1504I
  ;2124I
  ;1914I
  ;1458I
  ;2357I
  ;1630I
  ;1739I
  ;2640I
  ;1961I
  ;2016I
  ;2291I
  ;4140I
  ;2325I
  ;2693I
  ;2741I
  ;2703I
  ;2205I
  ;2654I
  ;2260I
  ;2343I
  ;4670I
  ;2574I
  ;3474I
  ;2797I
  ;4432I
  ;2962I
  ;3197I
  ;3653I
  ;5490I
  ;3369I
  ;3977I
  ;3700I
  ;4359I
  ;4221I
  ;6684I
  ;9338I
  ;6025I
  ;5001I
  ;4465I
  ;4548I
  ;7353I
  ;6619I
  ;6725I
  ;4603I
  ;5140I
  ;6048I
  ;6795I
  ;5759I
  ;7018I
  ;7921I
  ;6662I
  ;6566I
  ;7590I
  ;8978I
  ;7069I
  ;7677I
  ;8059I
  ;8686I
  ;11706I
  ;13066I
  ;9013I
  ;9068I
  ;12055I
  ;10224I
  ;11114I
  ;12817I
  ;13387I
  ;18368I
  ;9743I
  ;13361I
  ;11807I
  ;13680I
  ;17680I
  ;13228I
  ;13635I
  ;18775I
  ;14156I
  ;14746I
  ;18283I
  ;15128I
  ;19292I
  ;23169I
  ;29487I
  ;26204I
  ;18081I
  ;19237I
  ;37318I
  ;23130I
  ;19967I
  ;32237I
  ;24624I
  ;39230I
  ;38258I
  ;27041I
  ;25035I
  ;25442I
  ;26863I
  ;41991I
  ;46393I
  ;28381I
  ;28902I
  ;37286I
  ;37575I
  ;35095I
  ;45409I
  ;62360I
  ;57253I
  ;38048I
  ;79277I
  ;39204I
  ;42367I
  ;49993I
  ;78895I
  ;44591I
  ;49659I
  ;64239I
  ;73143I
  ;50477I
  ;51898I
  ;52305I
  ;66188I
  ;63476I
  ;78040I
  ;80686I
  ;57283I
  ;63997I
  ;72381I
  ;72670I
  ;74299I
  ;82639I
  ;77252I
  ;80415I
  ;81571I
  ;92844I
  ;89681I
  ;86958I
  ;94250I
  ;114474I
  ;95068I
  ;100136I
  ;126604I
  ;124568I
  ;194889I
  ;124686I
  ;109588I
  ;120759I
  ;121280I
  ;129664I
  ;129953I
  ;131582I
  ;146969I
  ;210368I
  ;168549I
  ;151551I
  ;158823I
  ;164210I
  ;161986I
  ;204656I
  ;283266I
  ;242039I
  ;181208I
  ;189318I
  ;209542I
  ;330301I
  ;279582I
  ;230347I
  ;230868I
  ;239541I
  ;286672I
  ;239252I
  ;250423I
  ;261535I
  ;259617I
  ;276922I
  ;278551I
  ;441568I
  ;428166I
  ;323033I
  ;310374I
  ;368365I
  ;345418I
  ;428859I
  ;390750I
  ;370526I
  ;450853I
  ;412076I
  ;398860I
  ;449083I
  ;461215I
  ;469599I
  ;469888I
  ;668400I
  ;478793I
  ;897765I
  ;489675I
  ;673611I
  ;521152I
  ;680900I
  ;746810I
  ;649077I
  ;759115I
  ;939487I
  ;633407I
  ;1440015I
  ;780441I
  ;715944I
  ;877942I
  ;831741I
  ;769386I
  ;810936I
  ;860075I
  ;847943I
  ;910298I
  ;1170229I
  ;948392I
  ;1837252I
  ;968468I
  ;1590856I
  ;1010827I
  ;1123082I
  ;1154559I
  ;1202052I
  ;1418463I
  ;1380217I
  ;1728833I
  ;1392522I
  ;1349351I
  ;2372281I
  ;1485330I
  ;1547685I
  ;1526880I
  ;2345405I
  ;3205480I
  ;1580322I
  ;1658879I
  ;2317819I
  ;2386931I
  ;1858690I
  ;2749737I
  ;3251212I
  ;2649962I
  ;2516153I
  ;2133909I
  ;2165386I
  ;2277641I
  ;2767814I
  ;2551403I
  ;2741873I
  ;2772739I
  ;2834681I
  ;3830735I
  ;2876231I
  ;3012210I
  ;3650716I
  ;5391835I
  ;3107202I
  ;3792788I
  ;4426693I
  ;3239201I
  ;3517569I
  ;3992599I
  ;4024076I
  ;5067556I
  ;4443027I
  ;8467103I
  ;4299295I
  ;4907259I
  ;4411550I
  ;4829044I
  ;5019514I
  ;5644045I
  ;5293276I
  ;7438903I
  ;5607420I
  ;8400478I
  ;5888441I
  ;7550229I
  ;6119412I
  ;6756770I
  ;8204338I
  ;7944262I
  ;7031989I
  ;8424828I
  ;7650751I
  ;8821643I
  ;9736303I
  ;9462541I
  ;12479795I
  ;8710845I
  ;9128339I
  ;9206554I
  ;9240594I
  ;19236565I
  ;12400815I
  ;10626934I
  ;10900696I
  ;13551682I
  ;11495861I
  ;13258171I
  ;14701032I
  ;12645211I
  ;15754567I
  ;23545907I
  ;13788759I
  ;14682740I
  ;17917399I
  ;15456817I
  ;18277685I
  ;16361596I
  ;17532488I
  ;17839184I
  ;17951439I
  ;18447148I
  ;18334893I
  ;18368933I
  ;19833488I
  ;25601728I
  ;35588055I
  ;23301511I
  ;35041768I
  ;24452378I
  ;30484395I
  ;26952678I
  ;25903382I
  ;26433970I
  ;27327951I
  ;29543326I
  ;31321247I
  ;30139557I
  ;31044336I
  ;32989305I
  ;31818413I
  ;34730529I
  ;35979636I
  ;41140695I
  ;35790623I
  ;36286332I
  ;44768863I
  ;49204893I
  ;70370591I
  ;43134999I
  ;49735481I
  ;47753889I
  ;58372287I
  ;50355760I
  ;50886348I
  ;52337352I
  ;56871277I
  ;57467508I
  ;53761921I
  ;81930684I
  ;59682883I
  ;61183893I
  ;61957970I
  ;62862749I
  ;64807718I
  ;67798049I
  ;84040221I
  ;71770259I
  ;72076955I
  ;78925622I
  ;93157609I
  ;104318892I
  ;90888888I
  ;92870480I
  ;97489370I
  ;98109649I
  ;108728047I
  ;102693112I
  ;101242108I
  ;103223700I
  ;121678995I
  ;128981942I
  ;115719891I
  ;113444804I
  ;120866776I
  ;122545632I
  ;219168365I
  ;235990436I
  ;160955658I
  ;136577977I
  ;139568308I
  ;143847214I
  ;150695881I
  ;215416112I
  ;229164695I
  ;219870830I
  ;183759368I
  ;188378258I
  ;247070914I
  ;222921103I
  ;350294614I
  ;434584477I
  ;203935220I
  ;333315634I
  ;282634653I
  ;234311580I
  ;518625089I
  ;236586667I
  ;243412408I
  ;294543095I
  ;259123609I
  ;280425191I
  ;276146285I
  ;344715026I
  ;533093284I
  ;283415522I
  ;347782434I
  ;334455249I
  ;372137626I
  ;784879091I
  ;387694588I
  ;392313478I
  ;422689838I
  ;426856323I
  ;827636379I
  ;613740825I
  ;470898247I
  ;440521887I
  ;617089902I
  ;657001418I
  ;477723988I
  ;479999075I
  ;628998344I
  ;707281514I
  ;577958617I
  ;610601534I
  ;906855398I
  ;867548533I
  ;631197956I
  ;948196074I
  ;552655238I
  ;812179237I
  ;706592875I
  ;794827464I
  ;780008066I
  ;1429269139I
  ;815003316I
  ;950897322I
  ;1252701124I
  ;1018480504I
  ;911420134I
  ;1283077484I
  ;918245875I
  ;1030379226I
  ;1260007141I
  ;957723063I
  ;1398244950I
  ;1130613855I
  ;1317194409I
  ;1183853194I
  ;1657490197I
  ;1367658554I
  ;1347482702I
  ;1845382542I
  ;1259248113I
  ;1811903351I
  ;1486600941I
  ;1501420339I
  ;1574835530I
  ;2063085550I
  ;3192865244I
  ;2531335896I
  ;1829666009I
  ;1869143197I
  ;1875968938I
  ;1941799360I
  ;1948625101I
  ;1988102289I
  ;3430744104I
  ;2088336918I
  ;5724201140I
  ;2715439359I
  ;2314467049I
  ;2443101307I
  ;4030136278I
  ;2626906667I
  ;2834083643I
  ;2606730815I
  ;3900240269I
  ;2745849054I
  ;3874988901I
  ;4506186857I
  ;5342346026I
  ;3404501539I
  ;6657042945I
  ;9263773760I
  ;3698809206I
  ;3705634947I
  ;3857245486I
  ;4076439207I
  ;3890424461I
  ;6910522850I
  ;4941373716I
  ;4402803967I
  ;4531438225I
  ;5233637482I
  ;10532031846I
  ;4757568356I
  ;5277184950I
  ;8582626064I
  ;5352579869I
  ;5440814458I
  ;6312365762I
  ;10818552619I
  ;7580623848I
  ;7103310745I
  ;10808945692I
  ;9209825355I
  ;7480940746I
  ;7404444153I
  ;7556054692I
  ;7562880433I
  ;7596059408I
  ;9167609411I
  ;8607877432I
  ;8293228428I
  ;8934242192I
  ;9344177683I
  ;9160372323I
  ;9765075707I
  ;14520189280I
  ;12353627764I
  ;11753180220I
  ;10629764819I
  ;12757024022I
  ;12915460302I
  ;12544125203I
  ;13716809915I
  ;14960498845I
  ;14507754898I
  ;15118935125I
  ;22324687347I
  ;14885384899I
  ;21704497526I
  ;14967324586I
  ;16940237091I
  ;19564007011I
  ;15889287836I
  ;21050252450I
  ;16901105860I
  ;31447991989I
  ;18094614515I
  ;18504550006I
  ;27320952350I
  ;20394840526I
  ;22382945039I
  ;22983392583I
  ;23173890022I
  ;29393139797I
  ;34619957828I
  ;35444787097I
  ;28684134501I
  ;32221359921I
  ;29468253743I
  ;29475079484I
  ;31008222961I
  ;29852709485I
  ;39923629674I
  ;45282427633I
  ;41445092976I
  ;50315974436I
  ;58536843986I
  ;32790393696I
  ;83106368132I
  ;46157282605I
  ;64428485559I
  ;68456317655I
  ;68265820216I
  ;42777785565I
  ;52616200447I
  ;45366337622I
  ;57793847850I
  ;51858024523I
  ;58077274298I
  ;58152388244I
  ;98309027140I
  ;60483302445I
  ;72144989595I
  ;58943333227I
  ;59327788969I
  ;89951556188I
  ;74235486672I
  ;72714023370I
  ;97218879255I
  ;75568179261I
  ;78156731318I
  ;84648418219I
  ;100571633415I
  ;130772931765I
  ;88935068170I
  ;88144123187I
  ;94635810088I
  ;104694126591I
  ;95393986012I
  ;104474224970I
  ;192618348157I
  ;231344565180I
  ;118271122196I
  ;116229662542I
  ;134718789117I
  ;119426635672I
  ;315992983399I
  ;134511512488I
  ;131657356597I
  ;132041812339I
  ;210286968378I
  ;146949510042I
  ;148282202631I
  ;175375610573I
  ;153724910579I
  ;248271474881I
  ;357236478420I
  ;177079191357I
  ;219801479784I
  ;182779933275I
  ;200088112603I
  ;252976329222I
  ;209168351561I
  ;235656298214I
  ;220703887512I
  ;234500784738I
  ;250312934535I
  ;250741175030I
  ;419455319939I
  ;251468448011I
  ;251083992269I
  ;359859124632I
  ;263699168936I
  ;428351939795I
  ;278991322381I
  ;411031908787I
  ;295231712673I
  ;368083682415I
  ;329100521152I
  ;336504843854I
  ;377167303960I
  ;409256464164I
  ;670539312208I
  ;391948284836I
  ;462144680783I
  ;420792000115I
  ;429872239073I
  ;443669136299I
  ;455204672250I
  ;471016822047I
  ;484813719273I
  ;501825167299I
  ;514440343966I
  ;891607647926I
  ;502552440280I
  ;757376393456I
  ;734715990983I
  ;542690491317I
  ;706263621460I
  ;574223035054I
  ;663315395088I
  ;869908849714I
  ;946958400056I
  ;839128703237I
  ;713672147814I
  ;769115588796I
  ;801204749000I
  ;917349353033I
  ;885076911323I
  ;850664239188I
  ;864461136414I
  ;873541375372I
  ;1674746124372I
  ;1220703965426I
  ;955830541320I
  ;1419935769274I
  ;1271668029076I
  ;1116913526371I
  ;1216224588094I
  ;1045242931597I
  ;1206005886405I
  ;1756478056270I
  ;1369579016548I
  ;1482787736610I
  ;1237538430142I
  ;1934983424164I
  ;1608244292033I
  ;1712670078609I
  ;2458242395568I
  ;1781810489447I
  ;1570320337796I
  ;3431224180642I
  ;1715125375602I
  ;1724205614560I
  ;1981374662785I
  ;1738002511786I
  ;1829371916692I
  ;2001073472917I
  ;2072744067691I
  ;2172055129414I
  ;2465178700871I
  ;2162156457968I
  ;2760368307199I
  ;2251248818002I
  ;2282781361739I
  ;2443544316547I
  ;2607117446690I
  ;3902115984383I
  ;2807858767938I
  ;4215361738723I
  ;3178564629829I
  ;3282990416405I
  ;5432297653559I
  ;3285445713398I
  ;4444937819707I
  ;4475493682801I
  ;3439330990162I
  ;3453127887388I
  ;4331323061250I
  ;4588492109475I
  ;3567374428478I
  ;7341446974545I
  ;6464010343227I
  ;4234900525659I
  ;4334211587382I
  ;4413405275970I
  ;5059107585940I
  ;6726742500803I
  ;4534030179741I
  ;5090640129677I
  ;5050661763237I
  ;5414976214628I
  ;7187561697781I
  ;5986423397767I
  ;6852820141876I
  ;6461555046234I
  ;6568436129803I
  ;6724776703560I
  ;8947435455711I
  ;8868104102016I
  ;10877415619197I
  ;7674231515821I
  ;7020502315866I
  ;9472512861910I
  ;7802274954137I
  ;7901586015860I
  ;8569112113041I
  ;8648305801629I
  ;8747616863352I
  ;8868241767123I
  ;9464067039207I
  ;12079609901806I
  ;13577596845436I
  ;9584691942978I
  ;14242667645624I
  ;10465637977865I
  ;11401399612395I
  ;12447978444001I
  ;16849021471571I
  ;15501125943505I
  ;13186331749794I
  ;18332308806330I
  ;17516547568752I
  ;14694733831687I
  ;14822777270003I
  ;15888744082989I
  ;16322537317450I
  ;14922088331726I
  ;26322277547430I
  ;15703860969997I
  ;16470698128901I
  ;23471083071632I
  ;17395922664981I
  ;20050329920843I
  ;29900134162886I
  ;19048758982185I
  ;23481009514201I
  ;20986091555373I
  ;24279425774665I
  ;21867037590260I
  ;25288415247868I
  ;26902525555900I
  ;27142712275688I
  ;28108420081520I
  ;27881065581481I
  ;48769424762069I
  ;30810832414715I
  ;29517511101690I
  ;38175743345888I
  ;29744865601729I
  ;38337735719161I
  ;30625949301723I
  ;34752619952182I
  ;32174559098898I
  ;47931395502324I
  ;43373223684801I
  ;52387845856185I
  ;40876932179182I
  ;48867157136854I
  ;40034850537558I
  ;74155572384722I
  ;42853129145633I
  ;49567841022533I
  ;46146463364925I
  ;47155452838128I
  ;56099247662583I
  ;54783591137381I
  ;55023777857169I
  ;55989485663001I
  ;60055624680379I
  ;59262376703419I
  ;79214667898343I
  ;60143460403413I
  ;61919424700627I
  ;60370814903452I
  ;90681573982102I
  ;62800508400621I
  ;66927179051080I
  ;81041716235752I
  ;80911782716740I
  ;90008581983761I
  ;82887979683191I
  ;83730061324815I
  ;92420970168166I
  ;86181313902483I
|]


let allContiguousSegments (f:array<'a>->unit) (incomingSequence:array<'a>)  =
  incomingSequence |> Array.iteri(fun i x->
    let upToI= max 0 (i-1)
    let numbersUpToI=incomingSequence.[0..upToI]
    numbersUpToI|>Array.iteri(fun j k->
      let upToJ= max 0 (j-1)
      let numbersUpToJ=numbersUpToI.[0..upToJ]
      numbersUpToJ|>Array.iteri(fun k z->
        let lft=max 0 (k-1)
        f numbersUpToI.[k..j]
        )
      )
    )
  ()


let p= m  //|>List.toArray //n|>List.toArray
let intWithPrevItems=
  m|>Array.mapi(fun i x->
  let lft=max 0 i-5
  let rgt= max 0 i-1
  (x,p.[lft..rgt])
  )
let crossproduct l1 l2 =
  seq { for el1 in l1 do
          for el2 in l2 do
            yield el1, el2 };;
let llCrossproductNoSame l1 l2 =
  crossproduct l1 l2 |> Seq.filter(fun x->fst x<>snd x)

let me (q:int[]) (total:int):bool=
  let ct=llCrossproductNoSame q q
  Seq.exists2 (fun a b->(fst a+ fst b=total) && (fst a<>fst b)) ct  ct

let rec pairAListWithItsPredecessors (endCount:int) (lst:bigint array) (acc:list<bigint*seq<bigint*bigint>>) (i:int) =
  let lst2=lst|>Array.toList
  match lst2 with
    |[]->acc
    |head::tail ->
        let lft=max 0 (i-endCount)
        let rgt= max 0 i-1
        let r=acc.[lft..rgt]|>List.map(fun y->fst y)
        //printfn "%A %A %A %A" acc lft rgt r
        let intArr:bigint list=r
        let newRet=[(head,intArr)]
        let secTupleList=(llCrossproductNoSame intArr intArr) |> Seq.map(fun z->orderPair z) |>Seq.distinct
        let oo=[(head, secTupleList)]
        let newAcc = List.append  acc oo//newRet acc // list<(int*int list) list>.Append acc
        pairAListWithItsPredecessors endCount (tail|>List.toArray) newAcc (i+1)

let numArr=pairAListWithItsPredecessors 25 m [] 0

let printM (ls:list<bigint*seq<bigint*bigint>>) =
  ls |> List.skip 25 |> List.iteri(fun i x->
    printf " - %A %A" i (fst x)
    //printfn "%A" (snd x)
    let intseq= snd x
    // intseq |> Seq.iter(fun (a,b)->
    //       printf "%A  |  " (a+b)
    //       )
    let sumFound=intseq|>Seq.exists(fun (a,b)->a+b=fst x)
    if sumFound
      then ()
      else
        printfn " "
        printfn "xx xx %A" sumFound
    )

let magicNumber=552655238I
let magicnomber=479999075I // listr size 596  line609 vs 618

// let ans (ls:array<bigint>) =
//   let ls2=ls
//   printfn "%A ll" ls2.Length
//   ls2
//   //|> Array.skip 24
//   |> Array.iteri(fun i x->
//       printfn " Number to test %A" x
//       let restOfArr=ls2.[0..i]
//       restOfArr
//       |> Array.iteri(fun j y->
//         let sliceToTest=restOfArr.[0..j]
//         //printf "Slices to sum %A  " sliceToTest
//         let sum = sliceToTest|>Array.sum
//         //printf " Listsize %A SUM %A" (sliceToTest.Length) sum
//         if sum=magicNumber
//           then
//             printfn ""
//             printfn ""
//             printfn "FOUND %A" x
//             printfn "%A" sliceToTest
//             printfn ""
//           else ()
//       )
//     )
